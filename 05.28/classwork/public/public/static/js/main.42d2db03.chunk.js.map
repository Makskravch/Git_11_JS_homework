{"version":3,"sources":["components/PredictionCreator/index.js","components/PredictionCreator/prediction-creator.js","components/PredictionHistory/index.js","components/PredictionHistory/predictions-history.js","components/PredictionViewer/index.js","components/PredictionViewer/prediction-viewer.js","App.js","serviceWorker.js","index.js"],"names":["PredictionCreator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomPrediction","predictions","Math","floor","random","length","onClick","addToHistory","currentPrediction","setState","state","react_default","a","createElement","Fragment","className","Component","PredictionHistory","_ref","predictionsList","map","el","i","key","PredictionViewer","prediction","prevState","concat","toConsumableArray","components_PredictionCreator","components_PredictionHistory","App","components_PredictionViewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTACeA,qBCGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,iBAAmB,WAGf,OAFsBP,EAAKD,MAApBS,YACWC,KAAKC,MAAMD,KAAKE,SAAWX,EAAKD,MAAMS,YAAYI,UATrDZ,EAanBa,QAAU,WAAM,IACLC,EAAgBd,EAAKD,MAArBe,aACDC,EAAoBf,EAAKO,mBAC/BP,EAAKgB,SAAS,CACVD,sBAEJD,EAAaC,IAjBbf,EAAKiB,MAAQ,CACTF,kBAAmB,kBAHRf,wEAsBV,IACEe,EAAqBZ,KAAKc,MAA1BF,kBACP,OACIG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,UAAQP,QAASV,KAAKU,SAAtB,kBACAK,EAAAC,EAAAC,cAAA,WAFJ,oBAGqBF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAkBP,WA7BnCQ,cCFjBC,SCEW,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,gBAEzB,OACIR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,eAEIH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,qBACTI,EAAgBC,IAAI,SAACC,EAAIC,GAAL,OAAWX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,GAAID,SCT9CG,cCIX,SAAAA,EAAYhC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4B,IACf/B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8B,GAAAzB,KAAAH,KAAMJ,KAMVe,aAAe,SAACkB,GAIZhC,EAAKgB,SAAS,SAACiB,GAAc,IAClBP,EAAmBO,EAAnBP,gBACP,MAAO,CACHA,gBAAe,GAAAQ,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAMyB,GAAN,CAAuBM,QAZ9ChC,EAAKiB,MAAQ,CACTS,gBAAiB,IAHN1B,wEAmBV,IACEQ,EAAeL,KAAKJ,MAApBS,YACAkB,EAAmBvB,KAAKc,MAAxBS,gBACP,OACIR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAACgB,EAAD,CAAmB5B,YAAaA,EAAaM,aAAcX,KAAKW,eAChEI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiB,EAAD,CAAmBX,gBAAiBA,YA3BrBH,aCQhBe,MARf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACmB,EAAD,CAAkB/B,YAAa,CAAC,OAAQ,QAAS,QAAS,MAAO,aCKnDgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42d2db03.chunk.js","sourcesContent":["import PredictionCreator from './prediction-creator'\r\nexport default PredictionCreator","import React, { Component } from 'react';\r\nimport './prediction-creator.css'\r\n\r\nclass PredictionCreator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            currentPrediction: 'No predictiony'\r\n        }\r\n    }\r\n\r\n    randomPrediction = () => {\r\n        const {predictions} = this.props\r\n        let randomIndex = Math.floor(Math.random() * this.props.predictions.length)\r\n        return predictions[randomIndex]\r\n    }\r\n\r\n    onClick = () => {\r\n        const {addToHistory} = this.props\r\n        const currentPrediction = this.randomPrediction()\r\n        this.setState({\r\n            currentPrediction\r\n        })\r\n        addToHistory(currentPrediction)\r\n    }\r\n\r\n    render() { \r\n        const {currentPrediction} = this.state\r\n        return (\r\n            <>\r\n                <button onClick={this.onClick}>Get prediction</button>\r\n                <br/>\r\n                Your prediction: <span className='predictionSpan'>{currentPrediction}</span>\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default PredictionCreator;","import PredictionHistory from './predictions-history'\r\nexport default PredictionHistory","import React, { Component } from 'react';\r\nimport './predictions-history.css'\r\n\r\nconst PredictionHistory = ({ predictionsList }) => {\r\n\r\n    return (\r\n        <>\r\n            History\r\n            <hr/>\r\n            <ul className='predictionHistory'>\r\n                {predictionsList.map((el, i) => <li key={i}>{el}</li>)}\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default PredictionHistory;","import PredictionViewer from './prediction-viewer'\r\nexport default PredictionViewer","import React, { Component } from 'react';\r\nimport PredictionCreator from '../PredictionCreator';\r\nimport PredictionHistory from '../PredictionHistory'\r\n\r\nclass PredictionViewer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            predictionsList: []\r\n        }\r\n    }\r\n    \r\n    addToHistory = (prediction) => {\r\n        // this.setState({                     // Коли наступне значення НЕ залежить від попереднього\r\n        //     predictionsList: [...predictionsList, predictions]\r\n        // })\r\n        this.setState((prevState) => {        // Коли наступне значення залежить від попереднього\r\n            const {predictionsList} = prevState\r\n            return {\r\n                predictionsList: [...predictionsList, prediction]\r\n            }\r\n        })\r\n    }\r\n\r\n    render() { \r\n        const {predictions} = this.props\r\n        const {predictionsList} = this.state\r\n        return (\r\n            <>\r\n                <PredictionCreator predictions={predictions} addToHistory={this.addToHistory} />\r\n                <br/>\r\n                <PredictionHistory predictionsList={predictionsList} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n \r\nexport default PredictionViewer;","import React from 'react';\nimport './App.css';\nimport PredictionViewer from './components/PredictionViewer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PredictionViewer predictions={['love', 'money', 'party', 'car', 'happy']} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}