{"version":3,"sources":["components/GameHistory/index.js","components/GameHistory/GameHistory.js","components/GuessNumber/index.js","components/GuessNumber/GuessNumber.js","App.js","serviceWorker.js","index.js"],"names":["GameHistory","_ref","names","state","react_default","a","createElement","firstPlayerName","hystorySteps","firstPlayerStep","map","step","i","key","secondPlayerName","secondPlayerStep","compValue","GuessNumber","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomValue","Math","floor","random","addToHistory","prediction","setState","prevState","concat","toConsumableArray","check","randNumber","firstValue","parseInt","refs","firstInput","value","secondValue","secondInput","firstValueABS","abs","secondValueABS","winnerName","_this$state$hystorySt","ref","type","placeholder","onClick","components_GameHistory","Component","App","className","components_GuessNumber","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.119d75c9.chunk.js","sourcesContent":["import GameHistory from './GameHistory';\r\nexport default GameHistory;","import React from 'react';\r\nimport './GameHistory.css'\r\n\r\nconst GameHistory = ({names, state}) => {\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td>{names.firstPlayerName}</td>\r\n                    {state.hystorySteps.firstPlayerStep.map((step, i) => <td key={i}>{step}</td>)}\r\n                </tr>\r\n                <tr>\r\n                    <td>{names.secondPlayerName}</td>\r\n                    {state.hystorySteps.secondPlayerStep.map((step, i) => <td key={i}>{step}</td>)}\r\n                </tr>\r\n                <tr>\r\n                    <td>Value</td>\r\n                    {state.compValue.map((step, i) => <td key={i}>{step}</td>)}\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default GameHistory;","import GuessNumber from './GuessNumber'\r\nexport default GuessNumber","import React, { Component } from 'react';\r\nimport GameHistory from '../GameHistory'\r\n\r\nclass GuessNumber extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            compValue: [],\r\n            hystorySteps: {\r\n                firstPlayerStep: [],\r\n                secondPlayerStep: []\r\n            },\r\n            winnerName: 'No'\r\n        }\r\n    }\r\n\r\n    getRandomValue = () => {\r\n        return Math.floor(Math.random() * 100 + 1)\r\n    }\r\n\r\n    addToHistory = (prediction) => {\r\n        this.setState((prevState) => {\r\n            const {compValue} = prevState\r\n            return {\r\n                compValue: [...compValue, prediction]\r\n            }\r\n        })\r\n    }\r\n\r\n    check = () => {\r\n        const randNumber = this.getRandomValue()\r\n        this.addToHistory(randNumber)\r\n\r\n        let firstValue = parseInt(this.refs.firstInput.value)\r\n        let secondValue = parseInt(this.refs.secondInput.value)\r\n        let firstValueABS = Math.abs(randNumber - firstValue)\r\n        let secondValueABS = Math.abs(randNumber - secondValue)\r\n        \r\n        if (firstValueABS < secondValueABS) {\r\n            this.setState({\r\n                winnerName: this.props.firstPlayerName\r\n            })\r\n        } else if (firstValueABS > secondValueABS) {\r\n            this.setState({\r\n                winnerName: this.props.secondPlayerName\r\n            })\r\n        } else {\r\n            this.setState({\r\n                winnerName: 'Draw'\r\n            })\r\n        }\r\n\r\n        const {firstPlayerStep, secondPlayerStep} = this.state.hystorySteps\r\n        this.setState({\r\n            hystorySteps: {\r\n                firstPlayerStep: [...firstPlayerStep, firstValue],\r\n                secondPlayerStep: [...secondPlayerStep, secondValue]\r\n            }\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div>\r\n                <p>Гра «Відгадай число».  Двоє гравців вказуються свої версії чисел. Виграє той, чиє число ближче до числа, яке згенеровано комп’ютером випадковим чином.</p>\r\n                {this.props.firstPlayerName}: <input ref='firstInput' type='number' placeholder='Enter the number 1-100' />\r\n                {this.props.secondPlayerName}: <input ref='secondInput' type='number' placeholder='Enter the number 1-100' />\r\n                <br/>\r\n                <button onClick={this.check}>Get result</button>\r\n                <h3>{this.state.winnerName} win!</h3>\r\n                \r\n                <GameHistory names={this.props} state={this.state} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default GuessNumber;","import React from 'react';\nimport './App.css';\nimport GuessNumber from './components/GuessNumber';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GuessNumber firstPlayerName={'Sem'} secondPlayerName={'Jhon'} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}